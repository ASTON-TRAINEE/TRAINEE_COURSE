// new Map

//Map – это коллекция ключ/значение, как и Object.
//Но основное отличие в том, что Map позволяет использовать ключи любого типа.
//
// Методы и свойства:
//
// new Map() – создаёт коллекцию.
// map.set(key, value) – записывает по ключу key значение value.
// map.get(key) – возвращает значение по ключу или undefined, если ключ key отсутствует.
// map.has(key) – возвращает true, если ключ key присутствует в коллекции, иначе false.
// map.delete(key) – удаляет элемент (пару «ключ/значение») по ключу key.
// map.clear() – очищает коллекцию от всех элементов.
// map.size – возвращает текущее количество элементов.

// let map = new Map();
//
// map.set("1", "str1");    // строка в качестве ключа
// map.set(1, "num1");      // цифра как ключ
// map.set(true, "bool1");  // булево значение как ключ
//
// // помните, обычный объект Object приводит ключи к строкам?
// // Map сохраняет тип ключей, так что в этом случае сохранится 2 разных значения:

// alert(map.get(1)); // "num1"
// alert(map.get("1")); // "str1"
//
// alert(map.size); // 3
//////////////////////////////////
// СТЭК
// Стек (stack):
// Стек - это структура данных, работающая по принципу "последний вошел, первый вышел"
// (Last-In-First-Out, LIFO). Это означает, что последний добавленный элемент будет первым,
// который будет удален из стека.
//
// В JavaScript стек часто используется для выполнения операций в порядке обратном их добавлению.
// Например, при выполнении функций в JavaScript вызванные функции помещаются в стек вызовов (call stack),
// и они выполняются в порядке LIFO.
//
// Стек можно реализовать с помощью массива или с помощью связанного списка. Вот пример использования стека на основе массива:
//
// let stack = [];
//
// // Добавление элементов в стек
// stack.push(1);
// stack.push(2);
// stack.push(3);
//
// // Удаление элементов из стека
// console.log(stack.pop()); // Выведет: 3
// console.log(stack.pop()); // Выведет: 2
// console.log(stack.pop()); // Выведет: 1

//////////////////////////////////

// new Set
//Объект Set – это особый вид коллекции: «множество» значений (без ключей),
//где каждое значение может появляться только один раз.
//
// Его основные методы это:
//
// new Set(iterable) – создаёт Set, и если в качестве аргумента был предоставлен итерируемый объект (обычно это массив), то копирует его значения в новый Set.
// set.add(value) – добавляет значение (если оно уже есть, то ничего не делает), возвращает тот же объект set.
// set.delete(value) – удаляет значение, возвращает true, если value было в множестве на момент вызова, иначе false.
// set.has(value) – возвращает true, если значение присутствует в множестве, иначе false.
// set.clear() – удаляет все имеющиеся значения.
// set.size – возвращает количество элементов в множестве.

// let set = new Set();
//
// let john = { name: "John" };
// let pete = { name: "Pete" };
// let mary = { name: "Mary" };
//
// // считаем гостей, некоторые приходят несколько раз
// set.add(john);
// set.add(pete);
// set.add(mary);
// set.add(john);
// set.add(mary);
//
// // set хранит только 3 уникальных значения
// console.log(set.size); // 3
//
// for (let user of set) {
//   console.log(user.name); // John (потом Pete и Mary)
// }


//////////////////////////////////
// ОЧЕРЕДЬ
//Очередь - это структура данных, работающая по принципу "первый вошел, первый вышел"
// (First-In-First-Out, FIFO). Это означает, что первый добавленный элемент будет первым, который будет удален из очереди.
//
// В JavaScript очередь редко используется в чистом виде, но может быть полезной,
// когда требуется управлять операциями в порядке их добавления.
// Например, в реализации алгоритмов обхода графов (например, поиск в ширину) или обработке событий (например, очередь событий).
//
// Очередь также может быть реализована с помощью массива или связанного списка.
// Вот пример использования очереди на основе массива:

// let queue = [];
//
// // Добавление элементов в очередь
// queue.push(1);
// queue.push(2);
// queue.push(3);
//
// // Удаление элементов из очереди
// console.log(queue.shift()); // Выведет: 1
// console.log(queue.shift()); // Выведет: 2
// console.log(queue.shift()); // Выведет: 3
