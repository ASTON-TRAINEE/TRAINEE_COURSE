//В JavaScript существует три типа контекстов выполнения:
//
// Глобальный контекст выполнения. Это базовый, используемый по умолчанию контекст выполнения.
// Если некий код находится не внутри какой-нибудь функции, значит этот код принадлежит глобальному контексту.
// Глобальный контекст характеризуется наличием глобального объекта, которым,
// в случае с браузером, является объект window, и тем, что ключевое слово this указывает на этот глобальный объект.
// В программе может быть лишь один глобальный контекст.

// Контекст выполнения функции. Каждый раз, когда вызывается функция, для неё создаётся новый контекст.
// Каждая функция имеет собственный контекст выполнения.
// В программе может одновременно присутствовать множество контекстов выполнения функций.
// При создании нового контекста выполнения функции он проходит через определённую последовательность шагов, о которой мы поговорим ниже.

// Контекст выполнения функции eval. Код, выполняемый внутри функции eval, также имеет собственный контекст выполнения.
// Однако функцией eval пользуются очень редко, поэтому здесь мы об этом контексте выполнения говорить не будем.

//Стек выполнения
//
// Стек выполнения (execution stack), который ещё называют стеком вызовов (call stack),
// это LIFO-стек, который используется для хранения контекстов выполнения, создаваемых в ходе работы кода.
//
// Когда JS-движок начинает обрабатывать скрипт,
// движок создаёт глобальный контекст выполнения и помещает его в текущий стек.
// При обнаружении команды вызова функции движок создаёт новый контекст выполнения для этой функции и помещает его в верхнюю часть стека.
//
// Движок выполняет функцию, контекст выполнения которой находится в верхней части стека.
// Когда работа функции завершается, её контекст извлекается из стека и управление передаётся тому контексту,
// который находится в предыдущем элементе стека.

// function first() {
//     console.log('Inside first function');
//     second();
//     console.log('Again inside first function');
// }
// function second() {
//     console.log('Inside second function');
// }
// first();
// console.log('Inside Global Execution Context');

// Перед выполнением JavaScript-кода создаётся контекст выполнения. В процессе его создания выполняются три действия:
//
// Определяется значение this и осуществляется привязка this (this binding).
// Создаётся компонент LexicalEnvironment (лексическое окружение).
// Создаётся компонент VariableEnvironment (окружение переменных).

// ExecutionContext = {
//     ThisBinding = <this value>,
//     LexicalEnvironment = { ... },
//     VariableEnvironment = { ... },
//}
